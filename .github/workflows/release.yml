name: Release
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  GetVersion:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - id: version
        name: Get version
        run: echo "::set-output name=value::$(cat VERSION | grep v)"

      - name: Check if tag Exists
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${{github.repository}}/git/ref/tags/${{env.RELEASE_VERSION}}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Github-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs:
      - GetVersion
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: print version with needs
        run: echo ${{ needs.GetVersion.outputs.version }}
      - id: changelog
        name: "Generate release changelog"
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          unreleasedOnly: true
          unreleasedLabel: ${{ needs.GetVersion.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}    
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.GetVersion.outputs.version }}
          release_name: Release ${{ needs.GetVersion.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false

  Deploy-Built-Artifacts:
    strategy:
      matrix:
        package:
          - hello-world,hello
          - simple-storage,simple-storage
          - json-rpc,jsonrpc
          - subgraph-query,subgraph
        language:
          - assemblyscript
          - rust
    needs:
      - GetVersion
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      CI: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Read .nvmrc
        run: echo ::set-output name=NVMRC::$(cat .nvmrc)
        id: nvm
      - name: Setup Node.js
        uses: actions/setup-node@master
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-deployments-v1
          restore-keys: |
            ${{ runner.os }}-yarn-deployments-

      # Install packages
      - name: Install pinata cli
        run: yarn global add pinata-upload-cli
      - name: Install ethers cli
        run: yarn global add @ethersproject/cli

      # Get Package Metadata
      - id: package
        name: Get Package Metadata
        run: |
          echo ::set-output name=name::$(node ./scripts/release/getPackageData.js ${{ matrix.package }} ${{ matrix.language }} 0) 
          echo ::set-output name=uri::$(node ./scripts/release/getPackageData.js ${{ matrix.package }} ${{ matrix.language }} 1)

      # Setup Pinata
      - name: Setup Pinata
        run: pinata-cli -a ${{ secrets.PINATA_API_KEY }}

      # Fetch Built Wrappers
      - name: create builds
        run: mkdir ./builds # fails if dir already exists but that's okay
        continue-on-error: true
      - uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: ci.yml
          workflow_conclusion: success
          branch: main
          event: push
          name: ${{ steps.package.outputs.name }}-${{ matrix.language }}-build-artifact
          path: ./${{ steps.package.outputs.name }}-${{ matrix.language }}-build-artifact
      - name: create deployments
        run: mkdir ./deployments # fails if dir already exists but that's okay
        continue-on-error: true

      # Deploy wrappers to IPFS
      - name: Deploy current wrapper to IPFS
        run: pinata-cli -u ./${{ steps.package.outputs.name }}-${{ matrix.language }}-build-artifact > ./deployments/${{ steps.package.outputs.name }}-${{ matrix.language }}.ipfs.txt
      - id: ipfs
        name: Fetch IPFS CID for current wrapper
        run: echo ::set-output name=value::$(node ./scripts/release/getIpfsCid.js "$(cat ./deployments/${{ steps.package.outputs.name }}-${{ matrix.language }}.ipfs.txt)")

      # Deploy wrappers to ENS
      - id: ensExists
        name: Check if ens uri exists
        run: 'echo ::set-output name=value::$(node ./scripts/release/checkEnsExists.js "$(ethers-ens lookup ${{ steps.package.outputs.uri }} --rpc https://goerli.infura.io/v3/${{ secrets.INFURA_KEY }})")'

      - name: Create ens subdomain uri
        uses: Wandalen/wretry.action@v1.0.11
        with:
          command: ethers-ens set-subnode "${{ steps.package.outputs.uri }}" --account ${{ secrets.PRIVATE_KEY }} --rpc https://goerli.infura.io/v3/${{ secrets.INFURA_KEY }} --yes --wait
          attempt_limit: 3
          attempt_delay: 20000
        if: ${{ (steps.ensExists.outputs.value == 'false') }}

      - name: Set Resolver for created ens subdomain
        uses: Wandalen/wretry.action@v1.0.11
        with:
          command: "ethers-ens set-resolver ${{ steps.package.outputs.uri }} --account ${{ secrets.PRIVATE_KEY }} --rpc https://goerli.infura.io/v3/${{ secrets.INFURA_KEY }} --yes --wait"
          attempt_limit: 3
          attempt_delay: 20000
        if: ${{ (steps.ensExists.outputs.value == 'false') }}

      - name: Publish current wrapper to ENS
        uses: Wandalen/wretry.action@v1.0.11
        with:
          command: "ethers-ens set-content ${{ steps.package.outputs.uri }} ${{ steps.ipfs.outputs.value }} --account ${{ secrets.PRIVATE_KEY }} --rpc https://goerli.infura.io/v3/${{ secrets.INFURA_KEY }} --yes --wait"
          attempt_limit: 3
          attempt_delay: 20000
